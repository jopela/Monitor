#!/usr/bin/python2

import argparse
import numpy as np
import matplotlib.pyplot as plt

from time import ctime
from datetime import datetime
from mako.template import Template

def main():
    """Entry point for loggen."""

    parser = argparse.ArgumentParser('Generate an html report from a component'\
            ' monitor log file')

    parser.add_argument(
            '-l',
            '--log',
            help='log file path (default is: /var/log/monitor/monitor.log)',
            type=str,
            default='/var/log/monitor/monitor.log'
            )

    parser.add_argument(
            '-t',
            '--template',
            help='report template file path (default is: /etc/monitor/monitor'\
                    '.mako)',
            type=str,
            default='/etc/monitor/monitor.mako'
            )

    args = parser.parse_args()

    statistics = dict()
    statistics['first'], statistics['last'] = get_acquisition_period(args.log)
    statistics['uptime'] = get_uptime(args.log)
    statistics['total_time'] = get_total_time(args.log)
    statistics['downtime'] = get_downtime(
            statistics['total_time'],
            statistics['uptime'])
    statistics['uptime_percentage'] = get_uptime_percentage(
            statistics['total_time'],
            statistics['uptime'])
    statistics['nbr_failures'] = get_number_failures(args.log)
    statistics['avrg_failure_time'] = get_avrg_failure_time(
            statistics['downtime'],
            statistics['nbr_failures'])
    statistics['avrg_failure_rate'] = get_avrg_failure_rate(
            statistics['total_time'],
            statistics['nbr_failures'])

    failures_timestamps = get_failures_timestamp(args.log)
    down_timestamps = get_downtime_timestamp(args.log)

    make_histogram(failures_timestamps)
    make_downtime_histogram(down_timestamps)

    generate_report(args.template, statistics)

    return

def get_acquisition_period(log_path):
    """Get the acquisition period (start date and last date) from the log file
    and return a tuple of the form (start_date,last_date)."""


    start_date = None
    last_date = None

    with open(log_path,'r') as log_f:
        for i, val in enumerate(log_f):
            if i == 0:
                timestamp = int(val.split(':')[0])
                start_date =  ctime(timestamp)

            last = val

        timestamp = int(last.split(':')[0])
        last_date = ctime(timestamp)

    return (start_date, last_date)

def get_state(log_entry):
    """Retrieve the state integer from the entry of the log file passed as 
    parameter."""

    state = int(log_entry.split(':')[1])
    return state

def get_time(log_entry):
    """Retrieve the time integer from the entry of the log file passed as 
    parameter."""

    time = int(log_entry.split(':')[0])
    return time

def get_uptime(log_path):
    """Compute the uptime of the system from the dataset and return it.
    Return unit is seconds."""

    uptime = 0
    state = None
    delta_time = 60
    p_time = None

    with open(log_path,'r') as log_f:
        for i, val in enumerate(log_f):
            state = get_state(val)
            time = get_time(val)

            if state == 0:
                if i == 0:
                    uptime += delta_time
                else:
                    uptime += time - p_time
            else:
                pass

            p_time = time

    return uptime

def get_total_time(log_path):
    """Compute the total time for wich the state of the system was probed and
    return it. Return unit is seconds."""
    
    total_time = 0
    d_time = 60
    p_time = None

    with open(log_path,'r') as log_f:
        for i, val in enumerate(log_f):
            time = get_time(val)

            if i == 0:
                total_time += d_time
            else:
                total_time += time - p_time

            p_time = time


    return total_time

def get_downtime(total_time, uptime):
    """ Compute the downtime and returns it. Return unit is seconds."""

    downtime = total_time - uptime
    return downtime

def get_downtime_timestamp(log_path):
    """ Return all the timestamp in the log for wich the system was down. """

    down_timestamps = []

    with open(log_path,'r') as log_f:
        for val in log_f:
            state = get_state(val)
            time = get_time(val)

            if state  != 0:
                down_timestamps.append(time)
            else:
                pass


    return down_timestamps


def get_uptime_percentage(total_time, uptime):
    """ Compute the uptime percentage and returns it. Return unit is seconds."""

    uptime_percentage = float(uptime) / float(total_time) * 100
    return int(uptime_percentage)

def get_failures_timestamp(log_path):
    """ Put the timestamps of the failures found in the dataset into an 
    array and return it."""
    machine_state = 2
    failures_timestamp = []

    with open(log_path,'r') as log_f:
        for val in log_f:
            state = get_state(val)
            time = get_time(val)

            if machine_state == 1:
                if state == 0:
                    machine_state = 2
                else:
                    pass
            elif machine_state == 2:
                if state == 0:
                    pass
                else:
                    failures_timestamp.append(time)
                    machine_state = 3
            elif machine_state == 3:
                if state == 0:
                    machine_state = 2
                else:
                    machine_state = 1
            else:
                print "state transition is not allowed."


    return failures_timestamp

def get_hours_failures(timestamps):
    """ Takes a list of timestamps when failures happened and return the
    hour (0-24) during which it happened. """

    hours = [datetime.fromtimestamp(i).hour for i in timestamps]
    return hours

def get_days_failures(timestamps):
    """ Takes a list of timestamps when failures happened and return the
    weekday (0-6, 0 == monday) during which it happened. """

    days = [datetime.fromtimestamp(i).weekday() for i in timestamps]
    return days

def get_number_failures(log_path):
    """ Compute the number of failures and return it."""

    nbr_failures = len(get_failures_timestamp(log_path))

    return nbr_failures

def get_avrg_failure_time(downtime,nbr_failures):
    """Computes the average lenght of a failure."""

    avrg_failure_time = float(downtime) / float(nbr_failures)
    return int(avrg_failure_time)

def get_avrg_failure_rate(total_time, nbr_failures):
    """Computes the average failure rate and returns it. Result unit is
    failure per hour."""

    avrg_failure_per_seconds = float(nbr_failures) / float(total_time)
    avrg_failure_rate = avrg_failure_per_seconds * 3600
    return avrg_failure_rate

def make_histogram(failure_timestamps):
    """ Use the hours and days and generate a .png 2d histogram of the failures.
    Saves it in the current folder under the name failures.png"""

    days = get_days_failures(failure_timestamps)
    hours = get_hours_failures(failure_timestamps)

    H, xedges, yedges = np.histogram2d(days, hours ,bins=[range(8),range(25)])

    plt.clf()

    plt.imshow(H, interpolation='nearest')
    plt.colorbar()
    plt.title('failures occurence frequency plot')
    plt.xlabel('hours of day (0-23)')
    plt.xticks(range(24))
    plt.yticks(range(7),['mon','tue','wed','thu','fri','sat','sun'])
    plt.ylabel('day of week')
    plt.savefig('failures.png')
    return

def make_downtime_histogram(downtime_timestamp):
    """ Takes the downtime timestamps and generate a 2d frequency map of them
    with the axis of the map beeing the hour during which it occured and the
    day during which it occured. Map is saved in downtime.png """

    filename = 'downtime.png'

    hours = get_hours_failures(downtime_timestamp)
    days = get_days_failures(downtime_timestamp)

    days_bin = range(8)
    hours_bin = range(25)

    days_tick = range(7)
    hours_tick = range(24)

    day_labels = ['mon','tue','wed','thu','fri','sat','sun']

    H, xedges, yedges = np.histogram2d(days, hours, bins=[days_bin, hours_bin])

    plt.clf()

    plt.imshow(H, interpolation='nearest')
    plt.colorbar()
    plt.title('downtime period frequency plot')
    plt.xlabel('hours of day (0-23)')
    plt.xticks(hours_tick)
    plt.yticks(days_tick,day_labels)
    plt.ylabel('day of week')
    plt.savefig(filename)
    return

def generate_report(template_path,statistics):
    """Generate the report from the statistics and saves it as an html file."""

    report_filename = 'monitor.html'
    template = Template(filename=template_path)

    content = template.render(**statistics)

    f = open(report_filename, 'w+')
    f.write(content)
    f.close()
    return




if __name__ == '__main__':
    main()
