#!/usr/bin/python2

import argparse

from time import ctime

def main():
    """Entry point for loggen."""

    parser = argparse.ArgumentParser('Generate an html report from a component'\
            ' monitor log file')

    parser.add_argument(
            '-l',
            '--log',
            help='log file path (default is: /var/log/monitor/monitor.log)',
            type=str,
            default='/var/log/monitor/monitor.log'
            )

    parser.add_argument(
            '-t',
            '--template',
            help='report template file path (default is: /etc/monitor/monitor'\
                    '.mako)',
            type=str,
            default='/etc/monitor/monitor.mako'
            )

    args = parser.parse_args()
    first, last = get_acquisition_period(args.log)

    print 'first', first
    print 'last', last

    return

def get_acquisition_period(log_path):
    """Get the acquisition period (start date and last date) from the log file
    and return a tuple of the form (start_date,last_date)."""

    start_date = None
    last_date = None

    with open(log_path,'r') as log_f:
        for i, val in enumerate(log_f):
            if i == 0:
                timestamp = int(val.split(':')[0])
                start_date =  ctime(timestamp)

            last = val

        timestamp = int(last.split(':')[0])
        last_date = ctime(timestamp)

    return (start_date, last_date)

def get_state(log_entry):
    """Retrieve the state integer from the entry of the log file passed as 
    parameter."""

    state = int(log_entry.split(':')[1])
    return state

def get_time(log_entry):
    """Retrieve the time integer from the entry of the log file passed as 
    parameter."""

    time = int(log_entry.split(':')[0])
    return time

def get_uptime(log_path):
    """Compute the uptime of the system from the dataset and return it.
    Return unit is seconds."""

    uptime = 0
    state = None
    delta_time = 60
    p_time = None

    with open(log_path,'r') as log_f:
        for i, val in enumerate(log_f):
            state = get_state(val)
            time = get_time(val)

            if state == 0:
                if i == 0:
                    uptime += delta_time
                else:
                    uptime += time - p_time
            else:
                pass

            p_time = time

    return uptime


if __name__ == '__main__':
    main()
