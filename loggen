#!/usr/bin/python2

import argparse

from time import ctime

def main():
    """Entry point for loggen."""

    parser = argparse.ArgumentParser('Generate an html report from a component'\
            ' monitor log file')

    parser.add_argument(
            '-l',
            '--log',
            help='log file path (default is: /var/log/monitor/monitor.log)',
            type=str,
            default='/var/log/monitor/monitor.log'
            )

    parser.add_argument(
            '-t',
            '--template',
            help='report template file path (default is: /etc/monitor/monitor'\
                    '.mako)',
            type=str,
            default='/etc/monitor/monitor.mako'
            )

    args = parser.parse_args()

    start, last = get_acquisition_period(args.log)
    uptime = get_uptime_percentage(args.log)

    print start
    print last
    print uptime

    return

def get_acquisition_period(log_path):
    """Get the acquisition period (start date and last date) from the log file
    and return a tuple of the form (start_date,last_date)."""

    start_date = None
    last_date = None

    with open(log_path,'r') as log_f:
        for i, val in enumerate(log_f):
            if i == 0:
                timestamp = int(val.split(':')[0])
                start_date =  ctime(timestamp)

            last = val

        timestamp = int(last.split(':')[0])
        last_date = ctime(timestamp)

    return (start_date, last_date)

def get_uptime_percentage(log_path):
    """Compute the uptime percentage from the log file and return it."""

    total_uptime = 0
    total_time = 0
    prev_timestamp = None
    current_timestamp = None

    current_state = None

    first_timestamp = None
    last_timestamp = None

    with open(log_path, 'r') as log_f:
        for i, val in enumerate(log_f):
            if i == 0:
                first_timestamp = int(val.split(':')[0])
                prev_timestamp = first_timestamp
                current_state = int(val.split(':')[1])
                continue

            current_timestamp = int(val.split(':')[0])
            state = int(val.split(':')[1])

            if current_state == 0 and state == 0:
                total_uptime += current_timestamp - prev_timestamp

            current_state = state
            prev_timestamp = current_timestamp

        last_timestamp = current_timestamp

        total_time = last_timestamp - first_timestamp
        uptime = float(total_uptime) / float(total_time)

        print total_time
        print total_uptime


        return uptime * 100

if __name__ == '__main__':
    main()
